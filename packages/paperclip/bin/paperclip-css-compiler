#!/usr/bin/env node
const {translateModuleToCSSSyleSheet, openPCConfig, loadFSDependencyGraphSync, getComponentGraphRefMap, getVariableRefMap, getQueryRefMap} = require('..');
const {addProtocol, FILE_PROTOCOL, normalizeFilePath} = require('tandem-common');
const {_,write,definition,out: outRelPath,watch} = require("yargs").argv;
const migrate = require("paperclip-migrator");
const fs = require('fs');
const path = require('path');
const glob = require('glob');

const filePaths = glob.sync(_[0]).map(normalizeFilePath);
const cwd = process.cwd();
const outAbsPath = outRelPath && resolvePath(outRelPath, cwd);

for (const relPath of filePaths) {
  try {
    translateFile(relPath);
  } catch(e) {
    console.error(relPath);
    console.error(e);
  }
}

if (watch) {
  chokidar.watch(_[0]).on(`all`, (eventType, path) => {
    if (eventType === `change`) {
      translateFile(path);
    }
  });
}

function resolvePath(relPath, cwd) {
  return normalizeFilePath(relPath.charAt(0) === "/" ? relPath : path.join(cwd, relPath));
}

function translateFile(relPath) {
  const absPath = resolvePath(relPath, cwd);
  const absUri = addProtocol(FILE_PROTOCOL, absPath);
  const { config, directory } = openPCConfig(path.dirname(absPath));
  const graph = loadFSDependencyGraphSync(config, directory, migrate);
  const entry = graph[absUri];
  
  let content;
  let contentFilePath;

  content = `/* ${relPath} */\n\n`;

  content += translateModuleToCSSSyleSheet(
    entry.content, 
    getComponentGraphRefMap(entry.content, graph), 
    getVariableRefMap(entry.content, graph), 
    getQueryRefMap(entry.content, graph), 
    absUri, 
    directory
  );

  contentFilePath = absPath.replace(/\.pc$/, ".js");
  if (outAbsPath) {
    contentFilePath = path.join(
      outAbsPath,
      difference(contentFilePath.split(/[\\/]/), outAbsPath.split(/[\\/]/)).slice(1).join("/"),
    );
  }
  if (write) {
    fs.writeFileSync(contentFilePath, content);
    console.log(`write ${contentFilePath}`);
  } else {
    console.log(content);
  }
}




