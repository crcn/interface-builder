#!/usr/bin/env node
const path = require("path");
const resolve = require("resolve");
const chokidar = require("chokidar");
const glob = require("glob");
const {Engine} = require("paperclip");

const argv = require("yargs")
.option("compiler", {
  describe: "Language compiler target",
})
.option("watch", {
}).argv;


const compiler = argv.compiler;
// const sourceFile = path.resolve(process.cwd(), argv._[0]);
const filesGlob = argv._[0];

try {
  const compilerModulePath = resolve2(compiler);
  const compile = require(compilerModulePath).compile;
  init(process.cwd(), filesGlob, compile, argv.watch);
  
} catch(e) {
  console.error(e);
  console.error("Compiler \"%s\" couldn't be found", compiler);
}


function resolve2(module) {
  try {
    return resolve.sync(compiler, { basedir: process.cwd() });
  } catch(e) {
    return require.resolve(module);
  }
}

function init(cwd, filesGlob, compile, shouldWatch) {
  
  
  const pcEngine = new Engine();

  async function compileFile(relativePath) {
    const fullPath = path.resolve(process.cwd(), relativePath);
    try {
      const ast = await pcEngine.parseFile(fullPath);
      const result = compile(ast);
      console.log(result);
    } catch(e) {
      console.error(e);
    }
  }
  glob(filesGlob, {
    cwd: cwd
  }, async function(err, filePaths) {
    await Promise.all(filePaths.map(compileFile));
    if (!shouldWatch) {
      pcEngine.dispose();
    }
  });

  if (shouldWatch) {
    watch(cwd, filesGlob, compileFile);
  }
}


function watch(cwd, filesGlob, compileFile) {

  const watcher = chokidar.watch(filesGlob, {
    cwd: cwd
  });

  watcher  
    .on('change', compileFile);
}